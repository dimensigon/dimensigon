"""0.1-b9

Revision ID: 4c7a6b2925b7
Revises: 4a4052e40afb
Create Date: 2020-05-12 16:58:26.136454

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '4c7a6b2925b7'
down_revision = '4a4052e40afb'
branch_labels = None
depends_on = None


def upgrade():
    schema_upgrades()
    data_upgrades()

def downgrade():
    data_downgrades()
    schema_downgrades()

def schema_upgrades():
    """schema upgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('L_orch_execution',
    sa.Column('id', sa.CHAR(), nullable=False),
    sa.Column('start_time', sa.DateTime(), nullable=False),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.Column('orchestration_id', sa.CHAR(), nullable=False),
    sa.Column('target', sa.JSON(), nullable=True),
    sa.Column('params', sa.JSON(), nullable=True),
    sa.Column('executor_id', sa.CHAR(), nullable=True),
    sa.Column('service_id', sa.CHAR(), nullable=True),
    sa.Column('success', sa.Boolean(), nullable=True),
    sa.Column('undo_success', sa.Boolean(), nullable=True),
    sa.Column('message', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['executor_id'], ['D_user.id'], name=op.f('fk_L_orch_execution_executor_id_D_user')),
    sa.ForeignKeyConstraint(['orchestration_id'], ['D_orchestration.id'], name=op.f('fk_L_orch_execution_orchestration_id_D_orchestration')),
    sa.ForeignKeyConstraint(['service_id'], ['D_service.id'], name=op.f('fk_L_orch_execution_service_id_D_service')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_L_orch_execution'))
    )
    with op.batch_alter_table('D_orchestration', schema=None) as batch_op:
        batch_op.add_column(sa.Column('params', sa.JSON(), nullable=True))

    with op.batch_alter_table('D_step', schema=None) as batch_op:
        batch_op.add_column(sa.Column('error_on_fetch', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('regexp_fetch', sa.Text(), nullable=True))

    with op.batch_alter_table('L_execution', schema=None) as batch_op:
        batch_op.add_column(sa.Column('fetched_data', sa.JSON(), nullable=True))
        batch_op.add_column(sa.Column('orch_execution_id', sa.CHAR(), nullable=True))
        batch_op.add_column(sa.Column('params', sa.JSON(), nullable=True))
        batch_op.alter_column('step_id',
               existing_type=sa.CHAR(),
               nullable=False)
        batch_op.drop_column('executor_id')
        batch_op.drop_column('service_id')

    with op.batch_alter_table('L_transfer', schema=None) as batch_op:
        batch_op.add_column(sa.Column('checksum', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('filename', sa.String(length=256), nullable=True))
        batch_op.add_column(sa.Column('size', sa.Integer(), nullable=True))
        batch_op.alter_column('software_id',
               existing_type=sa.CHAR(),
               nullable=True)

    # ### end Alembic commands ###

def schema_downgrades():
    """schema downgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('L_transfer', schema=None) as batch_op:
        batch_op.alter_column('software_id',
               existing_type=sa.CHAR(),
               nullable=False)
        batch_op.drop_column('size')
        batch_op.drop_column('filename')
        batch_op.drop_column('checksum')

    with op.batch_alter_table('L_execution', schema=None) as batch_op:
        batch_op.add_column(sa.Column('service_id', sa.CHAR(), nullable=True))
        batch_op.add_column(sa.Column('executor_id', sa.CHAR(), nullable=True))
        batch_op.create_foreign_key(None, 'D_user', ['executor_id'], ['id'])
        batch_op.create_foreign_key(None, 'D_service', ['service_id'], ['id'])
        batch_op.alter_column('step_id',
               existing_type=sa.CHAR(),
               nullable=True)
        batch_op.drop_column('params')
        batch_op.drop_column('orch_execution_id')
        batch_op.drop_column('fetched_data')

    with op.batch_alter_table('D_step', schema=None) as batch_op:
        batch_op.drop_column('regexp_fetch')
        batch_op.drop_column('error_on_fetch')

    with op.batch_alter_table('D_orchestration', schema=None) as batch_op:
        batch_op.drop_column('params')

    op.drop_table('L_orch_execution')
    # ### end Alembic commands ###

def data_upgrades():
    """Add any optional data upgrade migrations here!"""
    pass

def data_downgrades():
    """Add any optional data downgrade migrations here!"""
    pass