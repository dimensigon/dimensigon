"""initial

Revision ID: 2aa8721efbaf
Revises: 
Create Date: 2020-06-22 13:43:23.435265

"""
import dm
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '2aa8721efbaf'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    schema_upgrades()
    data_upgrades()


def downgrade():
    data_downgrades()
    schema_downgrades()


def schema_upgrades():
    """schema upgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('D_action_template',
                    sa.Column('last_modified_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('id', sa.CHAR(length=36), nullable=False),
                    sa.Column('name', sa.String(length=40), nullable=False),
                    sa.Column('version', sa.Integer(), nullable=False),
                    sa.Column('action_type', sa.VARCHAR(length=80), nullable=False),
                    sa.Column('code', sa.Text(), nullable=False),
                    sa.Column('parameters', sa.JSON(), nullable=True),
                    sa.Column('expected_stdout', sa.Text(), nullable=True),
                    sa.Column('expected_stderr', sa.Text(), nullable=True),
                    sa.Column('expected_rc', sa.Integer(), nullable=True),
                    sa.Column('system_kwargs', sa.JSON(), nullable=True),
                    sa.Column('pre_process', sa.Text(), nullable=True),
                    sa.Column('post_process', sa.Text(), nullable=True),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_D_action_template')),
                    sa.UniqueConstraint('name', 'version', name=op.f('uq_D_action_template_name'))
                    )
    op.create_table('D_orchestration',
                    sa.Column('last_modified_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('id', sa.CHAR(length=36), nullable=False),
                    sa.Column('name', sa.String(length=80), nullable=False),
                    sa.Column('version', sa.Integer(), nullable=False),
                    sa.Column('description', sa.Text(), nullable=True),
                    sa.Column('stop_on_error', sa.Boolean(), nullable=True),
                    sa.Column('stop_undo_on_error', sa.Boolean(), nullable=True),
                    sa.Column('undo_on_error', sa.Boolean(), nullable=True),
                    sa.Column('parameters', sa.JSON(), nullable=True),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_D_orchestration')),
                    sa.UniqueConstraint('name', 'version', name='D_orchestration_uq01')
                    )
    op.create_table('D_server',
                    sa.Column('last_modified_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('id', sa.CHAR(length=36), nullable=False),
                    sa.Column('name', sa.String(length=255), nullable=False),
                    sa.Column('granules', sa.Text(), nullable=True),
                    sa.Column('me', sa.Boolean(), nullable=True),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_D_server')),
                    sa.UniqueConstraint('name', name=op.f('uq_D_server_name'))
                    )
    op.create_table('D_service',
                    sa.Column('last_modified_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('id', sa.CHAR(length=36), nullable=False),
                    sa.Column('name', sa.String(length=255), nullable=False),
                    sa.Column('details', sa.JSON(), nullable=True),
                    sa.Column('created_on', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('last_ping', sa.DateTime(timezone=True), nullable=True),
                    sa.Column('status', sa.String(length=40), nullable=True),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_D_service'))
                    )
    op.create_table('D_software',
                    sa.Column('last_modified_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('id', sa.CHAR(length=36), nullable=False),
                    sa.Column('name', sa.String(length=80), nullable=False),
                    sa.Column('version', sa.String(length=40), nullable=False),
                    sa.Column('family', sa.String(length=50), nullable=True),
                    sa.Column('filename', sa.String(length=256), nullable=True),
                    sa.Column('size', sa.Integer(), nullable=True),
                    sa.Column('checksum', sa.Text(), nullable=True),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_D_software')),
                    sa.UniqueConstraint('name', 'version', name='D_software_u01')
                    )
    op.create_table('D_user',
                    sa.Column('last_modified_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('id', sa.CHAR(length=36), nullable=False),
                    sa.Column('user', sa.String(length=30), nullable=False),
                    sa.Column('password', sa.String(length=256), nullable=True),
                    sa.Column('email', sa.String(), nullable=True),
                    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
                    sa.Column('is_active', sa.Boolean(), nullable=False),
                    sa.Column('groups', sa.Text(), nullable=True),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_D_user')),
                    sa.UniqueConstraint('user', name='D_user_uq01')
                    )
    op.create_table('L_catalog',
                    sa.Column('entity', sa.String(length=40), nullable=False),
                    sa.Column('last_modified_at', sa.DateTime(timezone=True), nullable=False),
                    sa.PrimaryKeyConstraint('entity', name=op.f('pk_L_catalog')),
                    sa.UniqueConstraint('entity', name=op.f('uq_L_catalog_entity'))
                    )
    op.create_table('L_dimension',
                    sa.Column('id', sa.CHAR(length=36), nullable=False),
                    sa.Column('name', sa.String(length=40), nullable=False),
                    sa.Column('private', sa.BLOB(), nullable=True),
                    sa.Column('public', sa.BLOB(), nullable=True),
                    sa.Column('current', sa.Boolean(), nullable=False),
                    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_L_dimension')),
                    sa.UniqueConstraint('name', name=op.f('uq_L_dimension_name')),
                    sa.UniqueConstraint('private', name=op.f('uq_L_dimension_private')),
                    sa.UniqueConstraint('public', name=op.f('uq_L_dimension_public'))
                    )
    op.create_table('L_locker',
                    sa.Column('scope', sa.VARCHAR(length=80), nullable=False),
                    sa.Column('state', sa.VARCHAR(length=80), nullable=False),
                    sa.Column('applicant', sa.BLOB(), nullable=True),
                    sa.PrimaryKeyConstraint('scope', name=op.f('pk_L_locker'))
                    )
    op.create_table('D_gate',
                    sa.Column('last_modified_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('id', sa.CHAR(length=36), nullable=False),
                    sa.Column('server_id', sa.CHAR(length=36), nullable=True),
                    sa.Column('dns', sa.String(length=100), nullable=True),
                    sa.Column('ip', sa.VARCHAR(length=39), nullable=True),
                    sa.Column('port', sa.Integer(), nullable=False),
                    sa.Column('hidden', sa.Boolean(), nullable=True),
                    sa.ForeignKeyConstraint(['server_id'], ['D_server.id'], name=op.f('fk_D_gate_server_id_D_server')),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_D_gate')),
                    sa.UniqueConstraint('server_id', 'ip', 'dns', name=op.f('uq_D_gate_server_id'))
                    )
    op.create_table('D_log',
                    sa.Column('last_modified_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('id', sa.CHAR(length=36), nullable=False),
                    sa.Column('src_server_id', sa.CHAR(length=36), nullable=False),
                    sa.Column('target', sa.Text(), nullable=False),
                    sa.Column('include', sa.Text(), nullable=True),
                    sa.Column('exclude', sa.Text(), nullable=True),
                    sa.Column('dst_server_id', sa.CHAR(length=36), nullable=False),
                    sa.Column('dest_folder', sa.Text(), nullable=True),
                    sa.Column('recursive', sa.Boolean(), nullable=True),
                    sa.ForeignKeyConstraint(['dst_server_id'], ['D_server.id'],
                                            name=op.f('fk_D_log_dst_server_id_D_server')),
                    sa.ForeignKeyConstraint(['src_server_id'], ['D_server.id'],
                                            name=op.f('fk_D_log_src_server_id_D_server')),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_D_log')),
                    sa.UniqueConstraint('src_server_id', 'target', 'dst_server_id', name=op.f('uq_D_log_src_server_id'))
                    )
    op.create_table('D_service_orchestration',
                    sa.Column('last_modified_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('id', sa.CHAR(length=36), nullable=False),
                    sa.Column('service_id', sa.CHAR(length=36), nullable=True),
                    sa.Column('orchestration_id', sa.CHAR(length=36), nullable=True),
                    sa.Column('execution_time', sa.DateTime(timezone=True), nullable=True),
                    sa.ForeignKeyConstraint(['orchestration_id'], ['D_orchestration.id'],
                                            name=op.f('fk_D_service_orchestration_orchestration_id_D_orchestration')),
                    sa.ForeignKeyConstraint(['service_id'], ['D_service.id'],
                                            name=op.f('fk_D_service_orchestration_service_id_D_service')),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_D_service_orchestration'))
                    )
    op.create_table('D_software_server',
                    sa.Column('last_modified_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('software_id', sa.CHAR(length=36), nullable=False),
                    sa.Column('server_id', sa.CHAR(length=36), nullable=False),
                    sa.Column('path', sa.Text(), nullable=False),
                    sa.ForeignKeyConstraint(['server_id'], ['D_server.id'],
                                            name=op.f('fk_D_software_server_server_id_D_server')),
                    sa.ForeignKeyConstraint(['software_id'], ['D_software.id'],
                                            name=op.f('fk_D_software_server_software_id_D_software')),
                    sa.PrimaryKeyConstraint('software_id', 'server_id', name=op.f('pk_D_software_server'))
                    )
    op.create_table('D_step',
                    sa.Column('last_modified_at', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('id', sa.CHAR(length=36), nullable=False),
                    sa.Column('orchestration_id', sa.CHAR(length=36), nullable=False),
                    sa.Column('action_template_id', sa.CHAR(length=36), nullable=True),
                    sa.Column('undo', sa.Boolean(), nullable=False),
                    sa.Column('stop_on_error', sa.Boolean(), nullable=True),
                    sa.Column('stop_undo_on_error', sa.Boolean(), nullable=True),
                    sa.Column('undo_on_error', sa.Boolean(), nullable=True),
                    sa.Column('parameters', sa.JSON(), nullable=True),
                    sa.Column('expected_stdout', sa.Text(), nullable=True),
                    sa.Column('expected_stderr', sa.Text(), nullable=True),
                    sa.Column('expected_rc', sa.Integer(), nullable=True),
                    sa.Column('system_kwargs', sa.JSON(), nullable=True),
                    sa.Column('regexp_fetch', sa.Text(), nullable=True),
                    sa.Column('error_on_fetch', sa.Boolean(), nullable=True),
                    sa.Column('target', sa.Text(), nullable=True),
                    sa.Column('created_on', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('action_type', sa.VARCHAR(length=80), nullable=True),
                    sa.Column('code', sa.Text(), nullable=True),
                    sa.Column('post_process', sa.Text(), nullable=True),
                    sa.Column('pre_process', sa.Text(), nullable=True),
                    sa.Column('name', sa.String(length=40), nullable=True),
                    sa.ForeignKeyConstraint(['action_template_id'], ['D_action_template.id'],
                                            name=op.f('fk_D_step_action_template_id_D_action_template')),
                    sa.ForeignKeyConstraint(['orchestration_id'], ['D_orchestration.id'],
                                            name=op.f('fk_D_step_orchestration_id_D_orchestration')),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_D_step'))
                    )
    op.create_table('L_orch_execution',
                    sa.Column('id', sa.CHAR(length=36), nullable=False),
                    sa.Column('start_time', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('end_time', sa.DateTime(timezone=True), nullable=True),
                    sa.Column('orchestration_id', sa.CHAR(length=36), nullable=False),
                    sa.Column('target', sa.JSON(), nullable=True),
                    sa.Column('params', sa.JSON(), nullable=True),
                    sa.Column('executor_id', sa.CHAR(length=36), nullable=True),
                    sa.Column('service_id', sa.CHAR(length=36), nullable=True),
                    sa.Column('success', sa.Boolean(), nullable=True),
                    sa.Column('undo_success', sa.Boolean(), nullable=True),
                    sa.Column('message', sa.Text(), nullable=True),
                    sa.Column('parent_orch_execution_id', sa.CHAR(length=36), nullable=True),
                    sa.Column('server_id', sa.CHAR(length=36), nullable=True),
                    sa.ForeignKeyConstraint(['executor_id'], ['D_user.id'],
                                            name=op.f('fk_L_orch_execution_executor_id_D_user')),
                    sa.ForeignKeyConstraint(['orchestration_id'], ['D_orchestration.id'],
                                            name=op.f('fk_L_orch_execution_orchestration_id_D_orchestration')),
                    sa.ForeignKeyConstraint(['parent_orch_execution_id'], ['L_orch_execution.id'],
                                            name=op.f('fk_L_orch_execution_parent_orch_execution_id_L_orch_execution')),
                    sa.ForeignKeyConstraint(['server_id'], ['D_server.id'],
                                            name=op.f('fk_L_orch_execution_server_id_D_server')),
                    sa.ForeignKeyConstraint(['service_id'], ['D_service.id'],
                                            name=op.f('fk_L_orch_execution_service_id_D_service')),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_L_orch_execution'))
                    )
    op.create_table('L_transfer',
                    sa.Column('id', sa.CHAR(length=36), nullable=False),
                    sa.Column('software_id', sa.CHAR(length=36), nullable=True),
                    sa.Column('dest_path', sa.Text(), nullable=False),
                    sa.Column('num_chunks', sa.Integer(), nullable=False),
                    sa.Column('status', sa.VARCHAR(length=80), nullable=False),
                    sa.Column('created_on', sa.DateTime(timezone=True), nullable=True),
                    sa.Column('started_on', sa.DateTime(timezone=True), nullable=True),
                    sa.Column('ended_on', sa.DateTime(timezone=True), nullable=True),
                    sa.Column('filename', sa.String(length=256), nullable=True),
                    sa.Column('size', sa.Integer(), nullable=True),
                    sa.Column('checksum', sa.Text(), nullable=True),
                    sa.ForeignKeyConstraint(['software_id'], ['D_software.id'],
                                            name=op.f('fk_L_transfer_software_id_D_software')),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_L_transfer'))
                    )
    op.create_table('D_step_step',
                    sa.Column('parent_step_id', sa.CHAR(length=36), nullable=False),
                    sa.Column('step_id', sa.CHAR(length=36), nullable=False),
                    sa.ForeignKeyConstraint(['parent_step_id'], ['D_step.id'],
                                            name=op.f('fk_D_step_step_parent_step_id_D_step')),
                    sa.ForeignKeyConstraint(['step_id'], ['D_step.id'], name=op.f('fk_D_step_step_step_id_D_step')),
                    sa.PrimaryKeyConstraint('parent_step_id', 'step_id', name=op.f('pk_D_step_step'))
                    )
    op.create_table('L_execution',
                    sa.Column('id', sa.CHAR(length=36), nullable=False),
                    sa.Column('start_time', sa.DateTime(timezone=True), nullable=False),
                    sa.Column('end_time', sa.DateTime(timezone=True), nullable=True),
                    sa.Column('params', sa.JSON(), nullable=True),
                    sa.Column('rc', sa.Integer(), nullable=True),
                    sa.Column('stdout', sa.Text(), nullable=True),
                    sa.Column('stderr', sa.Text(), nullable=True),
                    sa.Column('success', sa.Boolean(), nullable=True),
                    sa.Column('step_id', sa.CHAR(length=36), nullable=False),
                    sa.Column('server_id', sa.CHAR(length=36), nullable=True),
                    sa.Column('orch_execution_id', sa.CHAR(length=36), nullable=True),
                    sa.ForeignKeyConstraint(['server_id'], ['D_server.id'],
                                            name=op.f('fk_L_execution_server_id_D_server')),
                    sa.ForeignKeyConstraint(['step_id'], ['D_step.id'], name=op.f('fk_L_execution_step_id_D_step')),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_L_execution'))
                    )
    op.create_table('L_route',
                    sa.Column('destination_id', sa.CHAR(length=36), nullable=False),
                    sa.Column('proxy_server_id', sa.CHAR(length=36), nullable=True),
                    sa.Column('gate_id', sa.CHAR(length=36), nullable=True),
                    sa.Column('cost', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['destination_id'], ['D_server.id'],
                                            name=op.f('fk_L_route_destination_id_D_server')),
                    sa.ForeignKeyConstraint(['gate_id'], ['D_gate.id'], name=op.f('fk_L_route_gate_id_D_gate')),
                    sa.ForeignKeyConstraint(['proxy_server_id'], ['D_server.id'],
                                            name=op.f('fk_L_route_proxy_server_id_D_server')),
                    sa.PrimaryKeyConstraint('destination_id', name=op.f('pk_L_route'))
                    )
    # ### end Alembic commands ###


def schema_downgrades():
    """schema downgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('L_route')
    op.drop_table('L_execution')
    op.drop_table('D_step_step')
    op.drop_table('L_transfer')
    op.drop_table('L_orch_execution')
    op.drop_table('D_step')
    op.drop_table('D_software_server')
    op.drop_table('D_service_orchestration')
    op.drop_table('D_log')
    op.drop_table('D_gate')
    op.drop_table('L_locker')
    op.drop_table('L_dimension')
    op.drop_table('L_catalog')
    op.drop_table('D_user')
    op.drop_table('D_software')
    op.drop_table('D_service')
    op.drop_table('D_server')
    op.drop_table('D_orchestration')
    op.drop_table('D_action_template')
    # ### end Alembic commands ###


def data_upgrades():
    import uuid
    """Add any optional data upgrade migrations here!"""
    lock_table = sa.table('L_locker',
                          sa.column('scope', sa.String),
                          sa.column('state', sa.String),
                          sa.column('priority', sa.Integer),
                          )

    op.bulk_insert(lock_table,
                   [{'scope': 'UPGRADE', 'state': 'UNLOCKED'},
                    {'scope': 'ORCHESTRATION', 'state': 'UNLOCKED'},
                    {'scope': 'CATALOG', 'state': 'UNLOCKED'}
                    ]
                   )

    action_table = sa.table('d_action_template',
                            sa.Column('last_modified_at', sa.DateTime),
                            sa.Column('id', sa.CHAR),
                            sa.Column('name', sa.String),
                            sa.Column('version', sa.Integer),
                            sa.Column('action_type', sa.VARCHAR),
                            sa.Column('code', sa.Text),
                            sa.Column('parameters', sa.JSON),
                            sa.Column('expected_stdout', sa.Text),
                            sa.Column('expected_stderr', sa.Text),
                            sa.Column('expected_rc', sa.Integer),
                            sa.Column('system_kwargs', sa.JSON),
                            sa.Column('pre_process', sa.Text),
                            sa.Column('post_process', sa.Text),
                            )

    op.bulk_insert(action_table,
                   [{'last_modified_at': dm.defaults.INITIAL_DATEMARK,
                     'id': '00000000-0000-0000-000a-000000000001',
                     'name': 'send',
                     'version': 1,
                     'action_type': 'REQUEST',
                     'code': '{"method": "post",'
                             '"view":"api_1_0.send",'
                             '"json": {"software_id": "{{software_id}}", "dest_server_id": "{{server_id}}"'
                             '{% if dest_path is defined %}, "dest_path":"{{dest_path}}"{% endif %}'
                             '{% if chunk_size is defined %}, "chunk_size":"{{chunk_size}}"{% endif %}'
                             '{% if max_senders is defined %}, "max_senders":"{{max_senders}}"{% endif %}'
                             ', "background": false, "include_transfer_data": true, "force": true} }',
                     'parameters': '',
                     'expected_stdout': '',
                     'expected_stderr': '',
                     'expected_rc': 201,
                     'system_kwargs': '',
                     'pre_process': '',
                     'post_process': "json_data=json.loads(cp.stdout)\nvc.set('file', json_data.get('file'))"},
                    {'last_modified_at': dm.defaults.INITIAL_DATEMARK,
                     'id': '00000000-0000-0000-000a-000000000002',
                     'name': 'wait',
                     'version': 1,
                     'action_type': 'NATIVE',
                     'code': '{{list_server_names}} {{timeout}}',
                     'parameters': '',
                     'expected_stdout': '',
                     'expected_stderr': '',
                     'expected_rc': '',
                     'system_kwargs': '',
                     'pre_process': '',
                     'post_process': ''},
                    {'last_modified_at': dm.defaults.INITIAL_DATEMARK,
                     'id': '00000000-0000-0000-000a-000000000003',
                     'name': 'orchestration',
                     'version': 1,
                     'action_type': 'ORCHESTRATION',
                     'code': '{{orchestration_id}} {{hosts}}',
                     'parameters': '',
                     'expected_stdout': '',
                     'expected_stderr': '',
                     'expected_rc': '',
                     'system_kwargs': '',
                     'pre_process': '',
                     'post_process': ''}
                    ])

    user_table = sa.table('D_user',
                          sa.Column('last_modified_at', sa.DateTime),
                          sa.Column('id', sa.CHAR),
                          sa.Column('user', sa.String),
                          sa.Column('password', sa.String),
                          sa.Column('email', sa.String),
                          sa.Column('created_at', sa.DateTime),
                          sa.Column('is_active', sa.Boolean),
                          sa.Column('groups', sa.CHAR)
                          )

    op.bulk_insert(user_table,
                   [{'last_modified_at': dm.defaults.INITIAL_DATEMARK,
                     'id': '00000000-0000-0000-0000-000000000001',
                     'user': 'root',
                     'password': '',
                     'email': '',
                     'created_at': dm.defaults.INITIAL_DATEMARK,
                     'is_active': True,
                     'groups': 'administrator'},
                    {'last_modified_at': dm.defaults.INITIAL_DATEMARK,
                     'id': '00000000-0000-0000-0000-000000000002',
                     'user': 'ops',
                     'password': '',
                     'email': '',
                     'created_at': dm.defaults.INITIAL_DATEMARK,
                     'is_active': True,
                     'groups': 'operator:deployer'},

                    {'last_modified_at': dm.defaults.INITIAL_DATEMARK,
                     'id': '00000000-0000-0000-0000-000000000003',
                     'user': 'reporter',
                     'password': '',
                     'email': '',
                     'created_at': dm.defaults.INITIAL_DATEMARK,
                     'is_active': True,
                     'groups': 'readonly'},

                    {'last_modified_at': dm.defaults.INITIAL_DATEMARK,
                     'id': '00000000-0000-0000-0000-000000000004',
                     'user': 'join',
                     'password': '',
                     'email': '',
                     'created_at': dm.defaults.INITIAL_DATEMARK,
                     'is_active': True,
                     'groups': ''}

                    ])


def data_downgrades():
    """Add any optional data downgrade migrations here!"""
    op.execute("delete from L_locker")
    op.execute("delete from D_action_template")
    op.execute("delete from D_user")
